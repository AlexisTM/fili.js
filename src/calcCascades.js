/* global IirCoeffs, define */
/*jslint bitwise: true */
(function (window) {
  'use strict';

  var getCoeffs = new IirCoeffs();
  var table = {
    // values from https://gist.github.com/endolith/4982787#file-all-values-txt
    bessel: {
      q: [
        [0.57735026919],
        [0.805538281842, 0.521934581669],
        [1.02331395383, 0.611194546878, 0.510317824749],
        [1.22566942541, 0.710852074442, 0.559609164796, 0.505991069397],
        [1.41530886916, 0.809790964842, 0.620470155556, 0.537552151325, 0.503912727276],
        [1.59465693507, 0.905947107025, 0.684008068137, 0.579367238641, 0.525936202016, 0.502755558204],
        [1.76552743493, 0.998998442993, 0.747625068271, 0.624777082395, 0.556680772868, 0.519027293158, 0.502045428643],
        [1.9292718407, 1.08906376917, 0.810410302962, 0.671382379377, 0.591144659703, 0.542678365981, 0.514570953471, 0.501578400482],
        [2.08691792612, 1.17637337045, 0.872034231424, 0.718163551101, 0.627261751983, 0.569890924765, 0.533371782078, 0.511523796759, 0.50125489338],
        [2.23926560629, 1.26117120993, 0.932397288146, 0.764647810579, 0.664052481472, 0.598921924986, 0.555480327396, 0.526848630061, 0.509345928377, 0.501021580965],
        [2.38695091667, 1.34368488961, 0.991497755204, 0.81060830488, 0.701011199665, 0.628878390935, 0.57943181849, 0.545207253735, 0.52208637596, 0.507736060535, 0.500847111042],
        [2.53048919562, 1.42411783481, 1.04937620183, 0.85593899901, 0.737862159044, 0.659265671705, 0.604435823473, 0.565352679646, 0.537608804383, 0.51849505465, 0.506508536474, 0.500715908905]
      ],
      f: [
        [1.27201964951],
        [1.60335751622, 1.43017155999],
        [1.9047076123, 1.68916826762, 1.60391912877],
        [2.18872623053, 1.95319575902, 1.8320926012, 1.77846591177],
        [2.45062684305, 2.20375262593, 2.06220731793, 1.98055310881, 1.94270419166],
        [2.69298925084, 2.43912611431, 2.28431825401, 2.18496722634, 2.12472538477, 2.09613322542],
        [2.91905714471, 2.66069088948, 2.49663434571, 2.38497976939, 2.30961462222, 2.26265746534, 2.24005716132],
        [3.13149167404, 2.87016099416, 2.69935018044, 2.57862945683, 2.49225505119, 2.43227707449, 2.39427710712, 2.37582307687],
        [3.33237300564, 3.06908580184, 2.89318259511, 2.76551588399, 2.67073340527, 2.60094950474, 2.55161764546, 2.52001358804, 2.50457164552],
        [3.52333123464, 3.25877569704, 3.07894353744, 2.94580435024, 2.84438325189, 2.76691082498, 2.70881411245, 2.66724655259, 2.64040228249, 2.62723439989],
        [3.70566068548, 3.44032173223, 3.2574059854, 3.11986367838, 3.01307175388, 2.92939234605, 2.86428726094, 2.81483068055, 2.77915465405, 2.75596888377, 2.74456638588],
        [3.88040469682, 3.61463243697, 3.4292654707, 3.28812274966, 3.17689762788, 3.08812364257, 3.01720732972, 2.96140104561, 2.91862858495, 2.88729479473, 2.8674198668, 2.8570800015]
      ]
    }
  };

  var calcCoeffs = function (params, behavior) {
    var filter = [];
    var cnt = 0;
    if (params.order > 12) {
      params.order = 12;
    }
    for (cnt = 0; cnt < params.order; cnt++) {
      var q, f, fd;
      if (params.characteristic === 'butterworth') {
        q = 1 / (2 * Math.sin((Math.PI / (params.order * 2)) * (cnt + 0.5)));
        f = 1;
      } else {
        q = table[params.characteristic].q[params.order - 1][cnt];
        f = table[params.characteristic].f[params.order - 1][cnt];
      }
      if (behavior === 'highpass') {
        fd = params.Fc / f;
      } else {
        fd = params.Fc * f;
      }
      filter.push(getCoeffs[behavior]({
        Fs: params.Fs,
        Fc: fd,
        Q: q,
        gain: params.gain || 0,
        preGain: params.preGain || false
      }));
    }
    return filter;
  };

  var initCalcCoeffs = function (behavior) {
    return function (params) {
      return calcCoeffs(params, behavior);
    };
  };

  var self = {};
  var CalcCascades = function () {
    for (var k in getCoeffs) {
      self[k] = initCalcCoeffs(k);
    }
    return self;
  };
  if (typeof module === 'object' && module && typeof module.exports === 'object') {
    module.exports = CalcCascades;
  } else {
    window.CalcCascades = CalcCascades;
    if (typeof define === 'function' && define.amd) {
      define(CalcCascades);
    }
  }
})(window);
